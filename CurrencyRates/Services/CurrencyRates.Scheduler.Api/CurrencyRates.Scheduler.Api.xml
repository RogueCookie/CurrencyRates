<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CurrencyRates.Scheduler.Api</name>
    </assembly>
    <members>
        <member name="M:CurrencyRates.Scheduler.Api.Controllers.SchedulerController.Get">
            <summary>
            Allow to setup the time for execution particular job
            </summary>
            <returns></returns>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.Extensions.SwaggerExtension">
            <summary>
            Swagger set up. Implementation of Swagger settings
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.Extensions.SwaggerExtension.RegisterSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Swagger set up. Implementation of Swagger settings
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.Extensions.SwaggerUiExtension">
            <summary>
            Add swagger in middleware
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.Extensions.SwaggerUiExtension.RegisterSwaggerUi(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Register swagger UI. Enable middleware to serve generated Swagger as a JSON endpoint
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.MediatR.Commands.AddNewJob">
            <summary>
            Add new job if not exist or update previous one
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.MediatR.Commands.AddNewJobHandler.Handle(CurrencyRates.Scheduler.Api.MediatR.Commands.AddNewJob,System.Threading.CancellationToken)">
            <summary>
            Add new job if not exist or update previous one
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.MediatR.Commands.SendCommandHandler.Handle(CurrencyRates.Scheduler.Api.MediatR.Commands.SendCommand,System.Threading.CancellationToken)">
            <summary>
            Send command by mediator
            </summary>
            <param name="request">Kind of command for being send</param>
            <param name="cancellationToken">Token for stopping execution</param>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.Models.JobOption">
            <summary>
            Describe fields from the job during reading data from configuration file
            </summary>
        </member>
        <member name="P:CurrencyRates.Scheduler.Api.Models.JobOption.UniqueName">
            <summary>
            Unique name of job
            </summary>
        </member>
        <member name="P:CurrencyRates.Scheduler.Api.Models.JobOption.IsEnabled">
            <summary>
            Condition Is enabled for reading
            </summary>
        </member>
        <member name="P:CurrencyRates.Scheduler.Api.Models.JobOption.CronSchedule">
            <summary>
            Cron schedule expressions (min, hours, day, month, day of week)
            </summary>
        </member>
        <member name="P:CurrencyRates.Scheduler.Api.Models.JobOption.Action">
            <summary>
            Name of the action method (class)
            </summary>
        </member>
        <member name="P:CurrencyRates.Scheduler.Api.Models.JobOption.Options">
            <summary>
            Additional parameters like EndPointUrl 
            </summary>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.Models.JobServiceOption">
            <summary>
            Represent the list of all jobs
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.Program.CreateHostBuilder(System.String[])">
            <summary>
            Allow to read parameters appsettings.json when app starts and if .env have the same variable as in appsettings then they were
            overwritten with parameters that are passed to .env file
            This is how we configure the application without changing the upsets physically on the disk
            </summary>
        </member>
        <member name="T:CurrencyRates.Scheduler.Api.Services.RabbitCommandHandlerService">
            <summary>
            Service for handle queues
            </summary>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.Services.RabbitCommandHandlerService.OnReceived(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Get the message to scheduler command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CurrencyRates.Scheduler.Api.Services.RabbitCommandHandlerService.InitializeRabbitMQListener">
            <summary>
            Through one queue, the Scheduler will receive a message that some connectors have appeared and he needs to add a job 
            </summary>
        </member>
    </members>
</doc>
