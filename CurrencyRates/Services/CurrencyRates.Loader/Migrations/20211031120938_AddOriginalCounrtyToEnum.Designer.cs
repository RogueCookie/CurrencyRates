// <auto-generated />
using System;
using CurrencyRates.Loader.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CurrencyRates.Loader.Migrations
{
    [DbContext(typeof(LoaderContext))]
    [Migration("20211031120938_AddOriginalCounrtyToEnum")]
    partial class AddOriginalCounrtyToEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("loader")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("OriginalCountry")
                        .HasColumnType("text")
                        .HasColumnName("original_country");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_alias");

                    b.ToTable("currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "AUD",
                            OriginalCountry = "Australia"
                        },
                        new
                        {
                            Id = 2,
                            Alias = "BRL",
                            OriginalCountry = "Brazil"
                        },
                        new
                        {
                            Id = 3,
                            Alias = "BGN",
                            OriginalCountry = "Bulgaria"
                        },
                        new
                        {
                            Id = 4,
                            Alias = "CAD",
                            OriginalCountry = "Canada"
                        },
                        new
                        {
                            Id = 5,
                            Alias = "CNY",
                            OriginalCountry = "China"
                        },
                        new
                        {
                            Id = 6,
                            Alias = "HRK",
                            OriginalCountry = "Croatia"
                        },
                        new
                        {
                            Id = 7,
                            Alias = "DKK",
                            OriginalCountry = "Denmark"
                        },
                        new
                        {
                            Id = 8,
                            Alias = "EUR",
                            OriginalCountry = "EMU"
                        },
                        new
                        {
                            Id = 9,
                            Alias = "HKD",
                            OriginalCountry = "Hongkong"
                        },
                        new
                        {
                            Id = 10,
                            Alias = "HUF",
                            OriginalCountry = "Hungary"
                        },
                        new
                        {
                            Id = 11,
                            Alias = "ISK",
                            OriginalCountry = "Iceland"
                        },
                        new
                        {
                            Id = 12,
                            Alias = "XDR",
                            OriginalCountry = "IMF"
                        },
                        new
                        {
                            Id = 13,
                            Alias = "INR",
                            OriginalCountry = "India"
                        },
                        new
                        {
                            Id = 14,
                            Alias = "IDR",
                            OriginalCountry = "Indonesia"
                        },
                        new
                        {
                            Id = 15,
                            Alias = "ILS",
                            OriginalCountry = "Israel"
                        },
                        new
                        {
                            Id = 16,
                            Alias = "JPY",
                            OriginalCountry = "Japan"
                        },
                        new
                        {
                            Id = 17,
                            Alias = "MYR",
                            OriginalCountry = "Malaysia"
                        },
                        new
                        {
                            Id = 18,
                            Alias = "MXN",
                            OriginalCountry = "Mexico"
                        },
                        new
                        {
                            Id = 19,
                            Alias = "NZD",
                            OriginalCountry = "New Zealand"
                        },
                        new
                        {
                            Id = 20,
                            Alias = "NOK",
                            OriginalCountry = "Norway"
                        },
                        new
                        {
                            Id = 21,
                            Alias = "PHP",
                            OriginalCountry = "Philippines"
                        },
                        new
                        {
                            Id = 22,
                            Alias = "PLN",
                            OriginalCountry = "Poland"
                        },
                        new
                        {
                            Id = 23,
                            Alias = "RON",
                            OriginalCountry = "Romania"
                        },
                        new
                        {
                            Id = 24,
                            Alias = "RUB",
                            OriginalCountry = "Russia"
                        },
                        new
                        {
                            Id = 25,
                            Alias = "SGD",
                            OriginalCountry = "Singapore"
                        },
                        new
                        {
                            Id = 26,
                            Alias = "ZAR",
                            OriginalCountry = "South Africa"
                        },
                        new
                        {
                            Id = 27,
                            Alias = "KRW",
                            OriginalCountry = "South Korea"
                        },
                        new
                        {
                            Id = 28,
                            Alias = "SEK",
                            OriginalCountry = "Sweden"
                        },
                        new
                        {
                            Id = 29,
                            Alias = "CHF",
                            OriginalCountry = "Switzerland"
                        },
                        new
                        {
                            Id = 30,
                            Alias = "THB",
                            OriginalCountry = "Thailand"
                        },
                        new
                        {
                            Id = 31,
                            Alias = "TRY",
                            OriginalCountry = "Turkey"
                        },
                        new
                        {
                            Id = 32,
                            Alias = "GBP",
                            OriginalCountry = "United Kingdom"
                        },
                        new
                        {
                            Id = 33,
                            Alias = "USD",
                            OriginalCountry = "USA"
                        },
                        new
                        {
                            Id = 35,
                            Alias = "CZH",
                            OriginalCountry = "Czech Republic"
                        });
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.CurrencyRatesDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyBaseId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_base_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("currency_rate");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.HasKey("Id")
                        .HasName("pk_currency_rates_dailies");

                    b.HasIndex("CurrencyBaseId")
                        .HasDatabaseName("ix_currency_rates_dailies_currency_base_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_currency_rates_dailies_currency_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_currency_rates_dailies_provider_id");

                    b.ToTable("currency_rates_dailies");
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.CurrencyRatesWeekly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyBaseId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_base_id");

                    b.Property<DateTime>("CurrencyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("currency_date");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("MaxRatesPerWeek")
                        .HasColumnType("numeric")
                        .HasColumnName("max_rates_per_week");

                    b.Property<decimal>("MinRatesPerWeek")
                        .HasColumnType("numeric")
                        .HasColumnName("min_rates_per_week");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.HasKey("Id")
                        .HasName("pk_currency_rates_weeklies");

                    b.HasIndex("CurrencyBaseId")
                        .HasDatabaseName("ix_currency_rates_weeklies_currency_base_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_currency_rates_weeklies_currency_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_currency_rates_weeklies_provider_id");

                    b.ToTable("currency_rates_weeklies");
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text")
                        .HasColumnName("provider_name");

                    b.HasKey("Id")
                        .HasName("pk_providers");

                    b.HasIndex("ProviderName")
                        .IsUnique()
                        .HasDatabaseName("ix_providers_provider_name");

                    b.ToTable("providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Provides currency rates based on Czech crown",
                            ProviderName = "Czech Bank"
                        });
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.CurrencyRatesDaily", b =>
                {
                    b.HasOne("CurrencyRates.Loader.DAL.Model.Currency", "CurrencyBase")
                        .WithMany("BaseRatesDaily")
                        .HasForeignKey("CurrencyBaseId")
                        .HasConstraintName("fk_currency_rates_dailies_currencies_currency_base_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyRates.Loader.DAL.Model.Currency", "Currency")
                        .WithMany("RatesDaily")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_currency_rates_dailies_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyRates.Loader.DAL.Model.Provider", "Provider")
                        .WithMany("RatesDaily")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_currency_rates_dailies_providers_provider_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("CurrencyBase");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.CurrencyRatesWeekly", b =>
                {
                    b.HasOne("CurrencyRates.Loader.DAL.Model.Currency", "CurrencyBase")
                        .WithMany("BaseRatesWeekly")
                        .HasForeignKey("CurrencyBaseId")
                        .HasConstraintName("fk_currency_rates_weeklies_currencies_currency_base_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyRates.Loader.DAL.Model.Currency", "Currency")
                        .WithMany("RatesWeekly")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_currency_rates_weeklies_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyRates.Loader.DAL.Model.Provider", "Provider")
                        .WithMany("RatesWeekly")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_currency_rates_weeklies_providers_provider_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("CurrencyBase");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.Currency", b =>
                {
                    b.Navigation("BaseRatesDaily");

                    b.Navigation("BaseRatesWeekly");

                    b.Navigation("RatesDaily");

                    b.Navigation("RatesWeekly");
                });

            modelBuilder.Entity("CurrencyRates.Loader.DAL.Model.Provider", b =>
                {
                    b.Navigation("RatesDaily");

                    b.Navigation("RatesWeekly");
                });
#pragma warning restore 612, 618
        }
    }
}
